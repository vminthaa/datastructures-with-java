public class path {
    public static void main(String[] args) {
        int r = 4;
        int c = 4;
        int[][] blocked = new int[][] {
            {0, 0, 0, 0},
            {0, 1, 0, 1},
            {0, 0, 0, 0},
            {0, 1, 0, 0}
        };

        int count = countpath(0, 0, r - 1, c - 1, blocked);
        System.out.println(count);
        printpath(0, 0, r - 1, c - 1, blocked, "");
    }

    public static int countpath(int rs, int cs, int re, int ce, int[][] blocked) {
        if (rs > re || cs > ce || blocked[rs][cs] == 1) return 0;
        if (rs == re && cs == ce) return 1;
        int down = countpath(rs + 1, cs, re, ce, blocked);
        int right = countpath(rs, cs + 1, re, ce, blocked);
        int total = down + right;
        return total;
    }

    public static void printpath(int rs, int cs, int re, int ce, int[][] blocked, String s) {
        if (rs > re || cs > ce || blocked[rs][cs] == 1) return;
        if (rs == re && cs == ce) {
            System.out.println(s);
            return;
        }
        blocked[rs][cs] = 1; 
        printpath(rs + 1, cs, re, ce, blocked, s + "D");
        printpath(rs, cs + 1, re, ce, blocked, s + "R");
        blocked[rs][cs] = 0; 
    }
}
